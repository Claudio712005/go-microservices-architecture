// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/audit_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/audit_repository.go -destination=__tests__/mocks/audit_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Claudio712005/go-microservices-architecture/user-worker/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditRepository is a mock of AuditRepository interface.
type MockAuditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditRepositoryMockRecorder
	isgomock struct{}
}

// MockAuditRepositoryMockRecorder is the mock recorder for MockAuditRepository.
type MockAuditRepositoryMockRecorder struct {
	mock *MockAuditRepository
}

// NewMockAuditRepository creates a new mock instance.
func NewMockAuditRepository(ctrl *gomock.Controller) *MockAuditRepository {
	mock := &MockAuditRepository{ctrl: ctrl}
	mock.recorder = &MockAuditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditRepository) EXPECT() *MockAuditRepositoryMockRecorder {
	return m.recorder
}

// RegistryNewAudit mocks base method.
func (m *MockAuditRepository) RegistryNewAudit(event *domain.AuditEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryNewAudit", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryNewAudit indicates an expected call of RegistryNewAudit.
func (mr *MockAuditRepositoryMockRecorder) RegistryNewAudit(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryNewAudit", reflect.TypeOf((*MockAuditRepository)(nil).RegistryNewAudit), event)
}
